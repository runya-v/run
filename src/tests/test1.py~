def createGenerator():
    mylist = range(5)
    
    for i in mylist :
        yield i*2

mygenerator = createGenerator()

for i in mygenerator:
    print(i+3)
    

"""    
1.
необходимо задать условие остановки генерации набора значений в генераторе. например:
while n < 1000:
    
2. 
При попытке вызова __init__ базового класса A в дочернем произойдёт бесконечный рекурсивный вызов. 
Для решения проблемы необходимо убрать 3 строку. 


3.
1. Создаю объект - очередь запроса ОЗ для одного имени.
2. Создаю объект - задача на обработку запроса ЗЗ, хранящая ОЗ.
3. Создаю объект - потоковая очередь задач ПОЗ, которая сохраняет ЗЗ
4. Организую многопоточную обработку запроса (ЗЗ) из ПОЗ. Некий набор потоков, уникально извлекает из ПОЗ один ЗЗ и обрабатывает его.
5.Два варианта обработки ЗЗ
5.1. Поток, который обрабатывает ПОЗ, последовательно опустошает (обрабатывает) ОЗ из ЗЗ.
5.2. Поток, который обрабатывает ПОЗ, обрабатывает один ОЗ из ЗЗ и повторно помещает ЗЗ в ПОЗ.

Таким образом я организую обработку одноимённого запроса только в одном потоке. 
Варианты обработки из пункта 5 зависят от дополнительных требований к процессу обработки запросов.

4.
1. Для реализации демона необходимо организовать в скрипте обработку SIGINT и SIGTERM? т.е. полностью завершить все текущие оперции.
2. Для обслуживания сети можно использовать библиотеку twisted.
3. Для контроля работы сервиса runit.
4.1. Для работы с MySQL - MySQLdb
4.2. Для работы с MongoDB - PyMongo

При разработке необходимо учесть следующие моменты:
1 - Максимальное количество подключений, которое способен обслужить демон.
2 - Ограничения на размер данных передаваемых в одном соединении.
3 - Скорость добавления, обновления и извлечения данных из db.
4 - Скорость обработки данных непосредственно демоном, ограничения и требования.
5 - Ограничения на память для демона (при записи данных на диск)
6 - Требования к система логирования.
7 - 
"""