/*!
 * \brief  Генератор HTML Тэга.
 * \author Rostislav Velichko. rostislav.vel@gmail.com
 * \date   23.11.2012
 */


#pragma once

#include <memory>
#include <map>
#include <string>

#include "Tag.hpp"

namespace HtmlParser {

    class BaseTagCreator {
    protected:
        typedef std::shared_ptr< BaseTagCreator >    PCreator;
        typedef std::map< std::string, PCreator >    Creators;
        typedef Creators::iterator                   CreatorsIter;
        typedef Creators::value_type                 CreatorsValue;
        typedef std::pair< CreatorsIter, bool >      InsertValue;

        static Creators _creators;

    public:
        static void init(const std::string &tag_name, PCreator creator);
        static BaseTagCreator* get(const std::string &tag_name);

        virtual ~BaseTagCreator();

        virtual BaseTag* operator() (
            BaseTag*, const std::string&, const LibArrts&, const std::string&)
             = 0;
    };


    template< class TagType >
    class TagCreator
        : public BaseTagCreator
    {
    protected:
        TagCreator(const std::string &tag_name) {
            PCreator tag_creator(new TagCreator< TagType >);
            BaseTagCreator::init(tag_name, tag_creator);
        }

    public:
        TagCreator()
        {}

        BaseTag* operator() (
            BaseTag *parent,
            const std::string &name,
            const LibArrts &attrs,
            const std::string &text)
        {
            return new TagType(parent, name, attrs, text);
        }
    };
}
